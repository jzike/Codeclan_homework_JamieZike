library(tidyverse)
data(msleep)
force(msleep)
View(msleep)
names(msleep)
head(msleep)
skimr::skim(msleep)
library(infer)
msleep %>%
ggplot(aes(x = sleep_total)) +
geom_histogram(col = "white")
#Assign the observed statistic - the mean hours of sleep for Jabberwockies
observed_stat <- 7
?hypothesise
#generate null distribution
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = mean(sleep_total)) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
msleep %>%
specify(response = sleep_total)
msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = mean(sleep_total))
#generate null distribution
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = mean(msleep$sleep_total)) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution
#visualise the null distribution
null_distribution %>%
visualise(bins = 30)
shapiro.test(msleep$sleep_total)
null_distribution %>%
visualise(bins =30) +
shade_p_value(obs_stat = observed_stat, direction = "both")
null_distribution <- msleep %>%
specify(response = sleep_total)
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = mean(msleep$sleep_total)) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
msleep %>%
specify(response = sleep_total)
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "both")
View(p_value)
bootstrap_resample_200 <- msleep %>%
rep_sample_n(size = 200, replace = TRUE, reps = 5000) %>%
summarise(mean_sleep = mean(total_sleep))
bootstrap_resample_200 <- msleep %>%
rep_sample_n(size = 200, replace = TRUE, reps = 5000) %>%
summarise(mean_sleep = mean(sleep_total))
View(bootstrap_resample_200)
bootstrap_resample_200 %>%
visualise(bins = 20)
bootstrap_resample_200 %>%
ggplot(aes(x = mean_sleep)) +
geom_histogram(col = "white")
msleep %>%
distinct(vore)
msleep %>%
distinct(vore) %>%
summarise(count = n())
#check the distinct classes of animal
msleep %>%
group_by(vore) %>%
summarise(count = n())
#check the distinct classes of animal
msleep %>%
group_by(vore) %>%
summarise(count = n())
#visualise groups using a boxplot
msleep %>%
filter(vore == "omni" | vore == "herbi") %>%
ggplot(x = sleep_total, y = vore) +
geom_boxplot(outlier.color = "red") +
geom_jitter()
#visualise groups using a boxplot
msleep %>%
filter(vore == "omni" | vore == "herbi") %>%
ggplot(aes(x = sleep_total, y = vore)) +
geom_boxplot(outlier.color = "red") +
geom_jitter()
null_distribution <- msleep %>%
filter(vore == "omni" | vore == "herbi") %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
msleep %>%
filter(vore == "omni" | vore == "herbi") %>%
specify(sleep_total ~ vore)
msleep %>%
filter(vore == "omni" | vore == "herbi") %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute")
View(null_distribution)
observed_stat <- msleep %>%
filter(vore == "omni" | vore == "herbi") %>%
specify(sleep_total ~ vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
observed_stat
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "right")
p_value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "right")
p_value
msleep %>%
mutate(is_domesticated = if_else(conservation == "domesticated"))
msleep %>%
mutate(is_domesticated = if_else(conservation == "domesticated", TRUE, FALSE))
msleep_domesticated <- msleep %>%
mutate(is_domesticated = if_else(conservation == "domesticated", TRUE, FALSE))
msleep_domesticated %>%
group_by(is_domesticated) %>%
summarise(prop = n()/nrow(msleep_domesticated)) %>%
filter(is_domesticated == TRUE)
msleep_domesticated %>%
group_by(is_domesticated) %>%
summarise(prop = n()/nrow(msleep_domesticated))
mean(msleep$sleep_total)
#generate null distribution
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
#I assigned mu to be the mean sleep total since I think that we want the null distribution to be centred around the population mean, not the jabberwockie mean
hypothesise(null = "point", mu = 7) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
#visualise the observed stat against the null distribution.
null_distribution %>%
visualise(bins =30) +
shade_p_value(obs_stat = observed_stat, direction = "both")
observed_stat <- mean(msleep$sleep_total)
#generate null distribution
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
#I assigned mu to be the mean sleep total since I think that we want the null distribution to be centred around the population mean, not the jabberwockie mean
hypothesise(null = "point", mu = 7) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
observed_stat <- mean(msleep$sleep_total)
#visualise the observed stat against the null distribution.
null_distribution %>%
visualise(bins =30) +
shade_p_value(obs_stat = observed_stat, direction = "both")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "both")
#generate the null distribution
null_distribution <- msleep_domesticated %>%
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
msleep_domesticated %>%
drop_na(is_domesticated)
msleep %>%
filter(is.na(conservation))
?case_when
msleep %>%
mutate(is_domesticated = case_when(
conservation == "domesticated" ~ TRUE,
is.na(conservation) ~ FALSE,
TRUE ~ FALSE), .after = conservation)
msleep %>%
mutate(is_domesticated = case_when(
conservation == "domesticated" ~ TRUE,
is.na(conservation) ~ FALSE,
TRUE ~ FALSE), .after = conservation) %>% view()
#create column to show whether an animial is domesticated
msleep_domesticated <- msleep %>%
mutate(is_domesticated = case_when(
conservation == "domesticated" ~ TRUE,
is.na(conservation) ~ FALSE,
TRUE ~ FALSE), .after = conservation)
#Check the proportion
msleep_domesticated %>%
group_by(is_domesticated) %>%
summarise(prop = n()/nrow(msleep_domesticated)) %>%
filter(is_domesticated == TRUE)
#generate the null distribution
null_distribution <- msleep_domesticated %>%
drop_na(is_domesticated)
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
#generate the null distribution
null_distribution <- msleep_domesticated %>%
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
#Check the proportion
msleep_domesticated %>%
group_by(is_domesticated) %>%
summarise(prop = n()/nrow(msleep_domesticated)) %>%
filter(is_domesticated == TRUE)
#Check the proportion and assign to observed stat
observed_stat <- msleep_domesticated %>%
group_by(is_domesticated) %>%
summarise(prop = n()/nrow(msleep_domesticated)) %>%
filter(is_domesticated == TRUE)
View(observed_stat)
#Check the proportion
msleep_domesticated %>%
group_by(is_domesticated) %>%
summarise(prop = n()/nrow(msleep_domesticated)) %>%
filter(is_domesticated == TRUE)
observed_stat <- msleep_domesticated %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "prop")
observed_stat
#Plot observed stat on null distribution
null_distribution %>%
visualise(bins = 30) +
shade_p_value(obs_stat = observed_stat, direction = "right")
#Plot observed stat on null distribution
null_distribution %>%
visualise(bins = 15) +
shade_p_value(obs_stat = observed_stat, direction = "right")
#Plot observed stat on null distribution
null_distribution %>%
visualise(bins = 10) +
shade_p_value(obs_stat = observed_stat, direction = "right")
#Plot observed stat on null distribution
null_distribution %>%
visualise(bins = 15) +
shade_p_value(obs_stat = observed_stat, direction = "right")
#get p value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "right")
p_value
